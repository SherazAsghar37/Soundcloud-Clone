datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    // Unique identifier for a user
    uid         String     @id  
    // Username chosen by the user
    username        String
    // Email address of the user
    email           String     @unique
    // Bio or description of the user
    bio             String
    // Number of followers for the user
    followers_count Int        @default(0)
    // Number of users the user is following
    following_count Int        @default(0)
    // Saved Play List
    saved_playlists Playlist[]
    // Comments
    comments        Comment[]
    // Likes
    user_likes      Like[]
    // Uploaded Songs
    songs           Song[]

    // Follow Relationship
    followedBy Follow[] @relation("followedBy")
    following  Follow[] @relation("following")
}

model Song {
    // Unique identifier for a song
    song_id String @id @default(uuid())

    thumbnail String

    privacy        Privacy   @default(PUBLIC)
    // Foreign key referencing the user who uploaded the song
    uid        String
    upload_by      User      @relation(fields: [uid], references: [uid])
    // Title of the song
    title          String
    // Description of the song
    description    String
    // Genre of the song
    genre          String
    // Length of the song in seconds
    duration       String
    // Number of likes the song has received
    likes_count    Int       @default(0)
    likes          Like[]
    // Number of plays the song has received
    plays_count    Int       @default(0)
    // Number of comments on the song
    comments_count Int       @default(0)
    // Timestamp of when the song was uploaded
    created_at     DateTime  @default(now())
    // Timestamp of the last update to the song
    updated_at     DateTime
    // Comments
    comments       Comment[]
    // URL of song store in storage
    url            String

    // playlist Relation
    song_playlist_id String
    playlists        SongToPlaylist[]
    // song_playlist    Playlist @relation(fields: [song_playlist_id], references: [playlist_id])
}

model SongToPlaylist {
    song_id     String
    playlist_id String
    song        Song     @relation(fields: [song_id], references: [song_id])
    playlist    Playlist @relation(fields: [playlist_id], references: [playlist_id])

    @@id([song_id, playlist_id])
}

model Playlist {
    // Unique identifier for a playlist
    playlist_id String           @id @default(uuid())
    // Foreign key referencing the user who created the playlist
    created_by  String
    // Title of the playlist
    title       String
    // privacy
    privacy     Privacy          @default(PUBLIC)
    // Description of the playlist
    description String
    // Array of song IDs included in the playlist
    songs       SongToPlaylist[]
    // Number of likes the playlist has received
    likes_count Int              @default(0)
    // Timestamp of when the playlist was created
    created_at  DateTime         @default(now())
    // Timestamp of the last update to the playlist
    updated_at  DateTime

    // playlist save
    uid String
    user    User   @relation(fields: [uid], references: [uid])
}

model Comment {
    // Unique identifier for a comment
    comment_id String   @id @default(uuid())
    // Foreign key referencing the user who posted the comment
    uid    String
    user       User     @relation(fields: [uid], references: [uid])
    // Content of the comment
    content    String
    // Timestamp of when the comment was posted
    created_at DateTime @default(now())
    // Timestamp of the last update to the comment
    updated_at DateTime
    // timestamp
    timestamp  Int

    // Foreign key referencing the song the comment is posted on
    // Song Relation
    song_id String
    song    Song   @relation(fields: [song_id], references: [song_id])
}

model Like {
    // Unique identifier for a like
    like_id String @id @default(uuid())

    // Foreign key referencing the song that was liked
    song_id String
    song    Song   @relation(fields: [song_id], references: [song_id])

    // Timestamp of when the like was created
    created_at DateTime @default(now())

    // Foreign key referencing the user who liked the song
    uid String
    user    User   @relation(fields: [uid], references: [uid])
}

model Follow {
    followedBy   User     @relation("followedBy", fields: [followedById], references: [uid])
    followedById String
    following    User     @relation("following", fields: [followingId], references: [uid])
    followingId  String
    created_at   DateTime @default(now())

    @@id([followingId, followedById])
}

enum Privacy {
    PUBLIC
    PRIVATE
}
